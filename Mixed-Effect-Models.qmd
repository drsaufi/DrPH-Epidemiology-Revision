---
title: "Logistic Regression with Correlated Data"
subtitle: "Advanced Categorical Data Analysis"
author: "Dr Muhammad Saufi"
date: last-modified
format: 
  html:
    toc: true
    toc-title: Contents
    toc-location: left
    toc-depth: 5
    toc-expand: 1
    number-sections: true
    theme:
      light: united
      dark: cyborg
    css: styles.css
editor: visual
include-after-body: "footer.html"
---

::: {.callout-note collapse="true"}
# About This Document

This document serves both learning and practical purposes. It is designed for educational use, aiming to enhance statistical analysis skills and provide clear, organized notes for future reference.
:::

# Introduction

Logistic regression for correlated data is designed to handle situations where binary outcomes (e.g., success/failure) are not independent, such as in clustered data (e.g., patients within hospitals) or repeated measures (e.g., multiple observations over time on the same subject). Standard logistic regression assumes independence among observations, which, when violated, leads to biased estimates and incorrect inferences. To address this, two primary models are used: marginal models and conditional models.

## Marginal Models (Population Average Models)

Marginal models focus on estimating the average effect of covariates across the entire population. They use Generalized Estimating Equations (GEE) to account for the correlation within clusters. The GEE approach specifies a working correlation structure (e.g., independence, exchangeable, auto-regressive, unstructured) to adjust for within-cluster correlations and provides robust population-level estimates.

## Conditional Models (Random Effects Models)

Conditional models include random effects to capture variability within clusters, offering subject-specific or cluster-specific inferences.

-   **Random Intercept Models**: Allow the intercept to vary across clusters, capturing baseline differences. Represent the average effect of covariates on the log-odds of the outcome.

-   **Random Slope Models**: Allow both the intercept and the slope of the covariate to vary across clusters, capturing differences in the effect of covariates. Capture unobserved heterogeneity between clusters or subjects.

# Setting Up the Environment

Load the necessary libraries to ensure the R environment is equipped with the tools and functions required for efficient and effective analysis.

```{r, warning=FALSE, message=FALSE}
# Load the libraries
library(tidyverse)
library(aplore3)
library(summarytools)
library(broom.mixed)
library(lme4)
library(gee)
library(sjPlot)
library(kableExtra)
library(ggplot2)
library(dplyr)
library(DT)
library(sjPlot)
library(HSAUR2)
```

# Multilevel Random Intercept Model

Random intercept model is used to account for hierarchical or nested data structures. This model includes both fixed effects, which apply to the entire population, and random effects, which account for the variability between clusters by allowing each cluster to have its own intercept, which captures the baseline level of the response variable for that cluster.

## Dataset Overview

The dataset is from the book "Applied Logistic Regression" by Hosmer, Lemeshow, and Sturdivant (2013). The specific dataset referred to is called `GLOW_RAND`, which contains 500 observations. This dataset is used for demonstrating logistic regression techniques and can be loaded in R using the `aplore3` package. The dataset contains:

-   **6 sites**: The number of subjects per site varies from as few as 24 in one site (site 4) to as many as 113 in another site (site 2).

-   **124 physicians**: The number of subjects treated by each physician varies from 1 to 13.

-   **Outcome of Interest**: Whether a fracture occurred in the first year of follow-up (fracture), coded as `NO` (0) or `YES` (1).

```{r}
# Data wrangling
data_glow <- glow_rand
glimpse(data_glow)
```

## Hierarchical Data Structure

The data is structured in multiple levels to account for the correlation within clusters. Each level represents a different grouping or clustering of the data:

-   **Level 1**: Subject

    -   This is the individual level, where each `sub_id` represents a unique participant or subject in the study.
    -   A participant in a clinical study with specific characteristics like age, gender, medical history, etc.

-   **Level 2**: Physician for Subject

    -   This level groups subjects under the same physician. Each `phy_id` represents a unique physician who is responsible for multiple subjects.
    -   All subjects treated by the same doctor. This introduces correlation because subjects under the same physician might receive similar treatments or follow similar protocols.

-   **Level 3**: Site Where Physician Works

    -   This is the highest level, grouping physicians by the site or location where they work. Each `site_id` represents a unique site, such as a hospital or clinic.
    -   All physicians working in the same hospital. This adds another layer of correlation because practices and resources can vary between sites, affecting the subjects treated there.

```{r}
# Data structure
data_glow %>% count(site_id)
data_glow %>%
  count(site_id, phy_id) %>%
  datatable()
```

## Estimation

In hierarchical or nested data structures, observations within the same group tend to be more similar to each other than to observations in different groups. This leads to correlation within groups, which needs to be accounted for in the analysis to avoid biased estimates and incorrect inferences.

### Sources of Correlation

In this dataset, there are two possible sources of correlation:

1.  **Physician (`phy_id`)**: Subjects (Level 1) are grouped under the same physician (Level 2). This means that subjects treated by the same physician may have more similar outcomes compared to subjects treated by different physicians.

2.  **Site (`site_id`)**: Physicians (Level 2) are grouped under the same site (Level 3). This means that physicians working at the same site may follow similar protocols or share resources, leading to more similar outcomes for their subjects compared to physicians working at different sites.

Because of these nested structures, we consider using random effects models to account for the correlation within these groups. However, in this analysis, the focus is on a two-level model using only the site level (`site_id`).

### Model Variables

The following covariates are used:

-   `weight5`: Continuous variable representing the weight (kg) at enrollment, divided by 5. Dividing by 5 helps in interpreting the coefficient more easily, as it will represent the change in log-odds for a 5 kg increase in weight.

-   `armassist`: Dichotomous variable indicating whether the subject needs assistance with their arms to stand.

-   `raterisk`: Three-level categorical variable indicating the self-reported risk of fracture (low, medium, high).

### Data Transformation

```{r}
# Data transformation
data_glow2 <- data_glow %>%
  mutate(
    weight5 = weight / 5,
    frac2 = as.integer(fracture) - 1
  )

# Summarize the transformed data
dfSummary(data_glow2)
```

------------------------------------------------------------------------

1.  A new variable `weight5` is created by dividing the original weight by 5. For example, if the original weight is 70 kg, `weight5` will be 70/5 = 14. This transformation is done so that the coefficient for `weight5` in the logistic regression model represents the change in log-odds for a 5 kg increase in weight, making interpretation easier.

2.  The `fracture` variable is originally coded as `NO` and `YES`. This step converts it into a numeric format where `NO` becomes 0 and `YES` becomes 1. The `as.integer()` function converts `NO` to 1 and `YES` to 2, so subtracting 1 results in `NO` becoming 0 and `YES` becoming 1.

### Population Average Model

Population Average Model is used to estimate the average effect of predictors on the outcome across the entire population. This approach is implemented using Generalized Estimating Equations (GEE).

```{r, warning=FALSE, message=FALSE}
# Fit the GEE model
glow_gee <- gee(frac2 ~ weight5 + raterisk + armassist,
  id = site_id, data = data_glow2,
  family = binomial(link = "logit"), corstr = "independence",
  scale.fix = TRUE, scale.value = 1, maxiter = 100
)

# View the GEE model
glow_gee
```

------------------------------------------------------------------------

**Summary of Output**

1.  **Model Formula**: `frac2 ~ weight5 + raterisk + armassist` specifies the dependent variable (`frac2`) and the independent variables (`weight5`, `raterisk`, and `armassist`).

    -   **ID**: `site_id` indicates that clustering is by site.
    -   **Data**: `data_glow2` is the dataset used.
    -   **Max Iterations**: The maximum number of iterations for the algorithm is set to 100.
    -   **Family**: `binomial(link = "logit")` indicates a logistic regression model.
    -   **Correlation Structure**: `independence` specifies an independent correlation structure.
    -   **Scale**: The scale parameter is fixed at 1.

2.  **Interpretation**

    -   **Intercept**: The baseline log-odds of having a fracture when all predictors are at their reference levels is -0.342.
    -   **weight5**: A 5 kg increase in weight is associated with a decrease in the log-odds of having a fracture by 0.121.
    -   **rateriskSame**: Compared to low risk, the same risk increases the log-odds of having a fracture by 0.721.
    -   **rateriskGreater**: Compared to low risk, greater risk increases the log-odds of having a fracture by 0.771.
    -   **armassistYes**: Needing arm assistance increases the log-odds of having a fracture by 0.901.

Proceed with the calculation of log odds and odds ratios from the model coefficients. `coef()` function extracts the estimated coefficients (log odds) from the GEE model `glow_gee`, and `exp()` function exponentiates the coefficients to convert them from log odds to odds ratios.

```{r}
res_glow_gee <- data.frame(
  log_odds = coef(glow_gee),
  odds_ratio = exp(coef(glow_gee))
)
res_glow_gee
```

------------------------------------------------------------------------

**Summary of Output**

1.  **Intercept**:

    -   **Log Odds**: -0.3424651, **Odds Ratio**: 0.7100179
    -   The odds ratio of the baseline category (when all predictors are at their reference levels) is 0.71, indicating that the odds of having a fracture are 29% lower compared to the reference category.

2.  **weight5**:

    -   **Log Odds**: -0.1211036, **Odds Ratio**: 0.8859421
    -   For each 5 kg increase in weight, the odds of having a fracture decrease by 11.4% (odds ratio of 0.886).

3.  **rateriskSame**:

    -   **Log Odds**: 0.7208085, **Odds Ratio**: 2.0560948
    -   Compared to the reference category (low risk), the odds of having a fracture are approximately 2.06 times higher for those with the same risk.

4.  **rateriskGreater**:

    -   **Log Odds**: 0.7713922, **Odds Ratio**: 2.1627751
    -   Compared to the reference category (low risk), the odds of having a fracture are approximately 2.16 times higher for those with a greater risk.

5.  **armassistYes**:

    -   **Log Odds**: 0.9012544, **Odds Ratio**: 2.4626903
    -   The odds of having a fracture are approximately 2.46 times higher for those who need assistance with their arms to stand compared to those who do not.

### Conditional (Clustered-Specific) Model

The conditional model, also known as the clustered-specific model, takes into account the correlation within clusters (e.g., subjects within the same site). There are two common models in this context:

1.  **Random intercept model**: Allows the intercept to vary across clusters.
2.  **Random slope model**: Allows the slope (effect of predictors) to vary across clusters.

```{r}
### Running the Random Intercept Model
glow_lme <- glmer(fracture ~ weight5 + raterisk + armassist + (1 | site_id),
  family = binomial,
  nAGQ = 20,
  data = data_glow2
)

summary(glow_lme)
```

------------------------------------------------------------------------

-   **Formula**: `fracture ~ weight5 + raterisk + armassist + (1 | site_id)`

    -   `fracture`: Dependent variable.
    -   `weight5`, `raterisk`, `armassist`: Independent variables (predictors).
    -   `(1 | site_id)`: Random intercept for each site.

-   **family = binomial**: Indicates logistic regression.

-   **nAGQ = 20**: Number of points for adaptive Gauss-Hermite quadrature, used to improve the accuracy of the estimation.

-   **data = data_glow**: Specifies the dataset.

#### Log Odds

The `broom` package is useful for converting model objects into tidy data frames, which are easier to work with.

```{r}
# Using `tidy` for a Tidy Output
tidy(glow_lme, conf.int = TRUE)
```

#### Odds Ratios

To get the odds ratios, exponentiate the log odds (coefficients).

```{r}
res_glow_lme <- tidy(glow_lme, exponentiate = TRUE, conf.int = TRUE)
res_glow_lme %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

**Summary of Output**

1.  Model Fit Statistics

    -   **AIC**: 534.9, **BIC**: 560.2
    -   Lower AIC and BIC values generally indicate a better-fitting model.

2.  Scaled Residuals: These values indicate the distribution of the residuals (differences between observed and predicted values). Ideally, these should be symmetrically distributed around zero.

3.  Random Effects: The random intercept for each site captures the variability in the baseline log-odds of fractures across different sites.

    -   **Groups**: Random effects are grouped by `site_id`.
    -   **Intercept Variance**: 0.1531
    -   **Intercept Std. Dev.**: 0.3913
    -   **Number of Observations**: 500
    -   **Number of Groups (sites)**: 6

4.  Fixed Effects

    -   **(Intercept)**: The baseline log-odds and odds ratio represent the likelihood of having a fracture when all predictors are at their reference levels. This effect is not statistically significant.

    -   **weight5**: For each 5 kg increase in weight, the log-odds of having a fracture decrease by 0.1158, and the odds decrease by about 10.9% (odds ratio = 0.891). This effect is statistically significant, indicating that higher weight reduces the likelihood of fractures.

    -   **rateriskSame**: Compared to the reference category (low risk), having the same risk increases the log-odds of having a fracture by 0.6831, and the odds increase by about 98% (odds ratio = 1.98). This effect is statistically significant, indicating that subjects who perceive themselves at the same risk are more likely to experience fractures compared to those at low risk.

    -   **rateriskGreater**: Compared to the reference category (low risk), having a greater risk increases the log-odds of having a fracture by 0.7453, and the odds increase by about 111% (odds ratio = 2.11). This effect is statistically significant, indicating that subjects who perceive themselves at greater risk are more likely to experience fractures compared to those at low risk.

    -   **armassistYes**: Needing assistance with arms to stand increases the log-odds of having a fracture by 0.9227, and the odds increase by about 152% (odds ratio = 2.52). This effect is highly statistically significant, indicating that subjects who need arm assistance to stand are significantly more likely to experience fractures compared to those who do not need assistance.

5.  Correlation of Fixed Effects

    -   Correlation matrix shows the correlation between the fixed effects.
    -   For example, `weight5` is highly negatively correlated with the intercept (-0.870), meaning that higher weights are associated with lower baseline log-odds of fractures.

6.  Conclusion: The model fits the data well, as indicated by the AIC and BIC values. There is variability in the baseline log-odds of fractures across different sites. These results indicate that weight, risk assessment, and arm assistance significantly influence the likelihood of fractures, with some variation between different sites.

#### Interpretation

1.  The odds of a fracture in the first year computed from the proportion of subjects requiring arm assistance to stand is 2.52 times that based on the proportion of subjects not requiring arm assistance, holding self-reported risk of fracture and weight constant.

2.  The population average odds ratio for a 5 kg increase in weight is 0.89. The interpretation is that the odds of a fracture in the first year computed from the proportion of subjects weighing 5 kg more than some reference weight is about 11% lower than that based on the reference weight, holding self-reported risk and arm assistance constant.

3.  The interpretation is that the odds of fracture in the first year of follow-up computed from the proportion of subjects reporting the same risk as others in the same age group is 1.98 times the odds of fracture in the first year of follow-up based on the proportion of subjects who report lower risk than others in the same age group, holding weight and arm assistance required constant.

4.  The interpretation is that the odds of fracture in the first year of follow-up computed from the proportion of subjects reporting higher risk than others in the same age group is 2.11 times the odds of fracture in the first year of follow-up based on the proportion of subjects who report lower risk than others in the same age group, holding weight and arm assistance required constant.

## Random Effect

Random effect refers to the variability in the intercepts for different sites. There are six sites, so there are six random intercepts.

```{r}
# Extracting Random Effects
re_glow_lme <- tidy(glow_lme, effects = "ran_vals", conf.int = TRUE)
re_glow_lme
```

::: callout-note
Each row corresponds to a site and shows the random intercept for that site along with the standard error and confidence intervals.
:::

The sum of the random effect and the constant (overall intercept, which is -0.471) is the predicted intercept value for each site.

```{r}
# Calculating Site-Specific Intercepts
re_glow_lme %>%
  mutate(
    overall_intercept = -0.471,
    site_intercept = estimate + overall_intercept
  ) %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

-   **Site 1**: Combined intercept is -0.564
-   **Site 2**: Combined intercept is -0.507
-   **Site 3**: Combined intercept is -0.931
-   **Site 4**: Combined intercept is -0.635
-   **Site 5**: Combined intercept is 0.026
-   **Site 6**: Combined intercept is -0.171

------------------------------------------------------------------------

**Interpretation**:

1.  **Random Intercepts**: Each site's intercept deviates from the overall intercept (-0.471) due to the random effects. This accounts for site-specific variability.

2.  **Combined Intercepts**: The combined intercepts are the sum of the overall intercept and the site-specific random intercepts. These represent the predicted log-odds of fractures for each site when all predictors are at their reference levels.

## Plots

`sjPlot` package is used to create visualizations to illustrate the effects of predictors (fixed effects) and the variability across groups (random effects).

### Fixed Effect Plot

The fixed effects plot provides a visual representation of the odds ratios for each predictor in the model, showing their effects on the outcome (fracture). Predictors with confidence intervals that do not cross 1 are statistically significant.

```{r}
plot_model(glow_lme, type = "est")
```

### Random Effect Plot

The random effects plot provides a visual representation of the random intercepts for each site, showing how each site's intercept deviates from the overall intercept. Sites with significant deviations have confidence intervals that do not cross 1.

```{r}
plot_model(glow_lme, type = "re")
```

## Prediction

Prediction is made using the fitted mixed-effects logistic regression model. It is divided into predictions for individual subjects (level 1) and sites (level 2).

### Prediction for Subjects (Level 1)

The objective here is to predict the logit (log-odds) and probabilities for individual subjects.

```{r, warning=FALSE, message=FALSE}
augment(glow_lme) %>%
  slice(1:30) %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

-   **augment(glow_lme)**: This function from the `broom` package is used to add predictions and other model-related values to the original dataset.
-   **slice(1:30)**: Selects the first 30 rows of the augmented data to display.
-   **kbl() %\>% kable_styling()**: Formats the data into a nice table for better visualization.

```{r}
# Predicted Probabilities for Subjects
head(predict(glow_lme, type = "response"), 10)
```

------------------------------------------------------------------------

-   **predict(glow_lme, type = 'response')**: Generates predicted probabilities for the response variable (fracture) based on the fitted model. The `type = 'response'` argument specifies that the output should be in the form of probabilities.
-   **head(, 10)**: Displays the first 10 predicted probabilities.

```{r}
# Predicted Logits for Subjects
head(predict(glow_lme, type = "link"), 10)
```

------------------------------------------------------------------------

-   **predict(glow_lme, type = 'link')**: Generates predicted log-odds (logits) for the response variable (fracture) based on the fitted model. The `type = 'link'` argument specifies that the output should be in the form of log-odds.
-   **head(, 10)**: Displays the first 10 predicted log-odds.

Manually calculate the predicted probability for the first subject using the logit value using the formula used is the logistic function: $$
\text{Probability} = \frac{e^{\text{logit}}}{1 + e^{\text{logit}}}
$$

```{r}
exp(-0.5203110) / (1 + exp(-0.5203110))
```

::: callout-tip
# Result

0.3727795, which is the predicted probability for the first subject.
:::

### Prediction for Sites (Level 2)

Predict probabilities and logits for 6 different sites (clusters).

1.  **Create a New Data Frame**

```{r}
new_data <- expand.grid(
  site_id = c(1:6),
  armassist = c("Yes", "No"),
  raterisk = c("Less", "Same", "Greater"),
  weight5 = mean(data_glow2$weight5)
)
```

------------------------------------------------------------------------

-   **expand.grid()**: Creates a new data frame with all combinations of the specified levels for `site_id`, `armassist`, `raterisk`, and `weight5`.
-   **site_id = c(1:6)**: Includes 6 sites.
-   **armassist = c('Yes', 'No')**: Includes both levels of arm assistance.
-   **raterisk = c('Less', 'Same', 'Greater')**: Includes all levels of self-reported risk.
-   **weight5 = mean(data_glow\$weight5)**: Sets `weight5` to the mean value of the original dataset.

2.  **Calculate Predicted Probabilities and Log Odds**

```{r}
prob_site <- head(predict(glow_lme, newdata = new_data, type = "response"))
logodds_site <- head(predict(glow_lme, newdata = new_data, type = "link"))
cbind(head(new_data), logodds_site, prob_site)
```

------------------------------------------------------------------------

-   **predict(glow_lme, newdata = new_data, type = 'response')**: Predicts probabilities for the new data.
-   **predict(glow_lme, newdata = new_data, type = 'link')**: Predicts log-odds for the new data.
-   **cbind(...)**: Combines the new data with the predicted log-odds and probabilities for display.

3.  **Further Predictions and Adding to Data Frame**

```{r}
prob_site2 <- predict(glow_lme, newdata = new_data, type = "response")
new_data$prob <- prob_site2
new_data$prob
```

------------------------------------------------------------------------

-   **predict(glow_lme, newdata = new_data, type = 'response')**: Generates predicted probabilities for the new data.
-   **new_data\$prob \<- prob_site2**: Adds the predicted probabilities to the new data frame as a new column.

# Multilevel Random Intercept and Random Slope Model

This type of model allows for more flexibility by letting both the intercept and the slope of one or more predictors vary across clusters (different sites). In a multilevel model, random intercepts are included to account for variability in the baseline outcome across clusters and random slopes to allow the effect of predictors to vary across clusters.

-   **Random Intercept**: Allows the baseline log-odds of the outcome (fracture) to vary across different sites.
-   **Random Slope**: Allows the effect of a predictor (e.g., weight5) to vary across different sites.

## Dataset Overview

The data to be analyzed comes from the Bangladesh Demographic and Health Survey (BDHS), a nationally representative cross-sectional survey of women of reproductive age (13-49 years). This survey collects extensive information on health and demographic indicators, which helps in understanding the health behaviors and outcomes of women in Bangladesh.

The primary focus of the analysis is a binary indicator that shows whether a woman received antenatal care from a medically-trained provider (such as a doctor, nurse, or midwife) at least once before her most recent live birth. The response variable is:

-   **antemed**: 1 if the woman received antenatal care at least once, 0 if not.

The dataset includes several predictor variables that may influence whether a woman received antenatal care. These variables are:

1.  **comm**: Community identifier.
2.  **womid**: Woman identifier.
3.  **antemed**: Received antenatal care at least once from a medically-trained provider (1 = yes, 0 = no).
4.  **bord**: Birth order of the child (ranges from 1 to 13).
5.  **mage**: Mother’s age at the child’s birth (in years).
6.  **urban**: Type of region of residence at the survey (1 = urban, 0 = rural).
7.  **meduc**: Mother’s level of education at the survey (1 = none, 2 = primary, 3 = secondary or higher).
8.  **islam**: Mother’s religion (1 = Islam, 0 = other).
9.  **wealth**: Household wealth index in quintiles (1 = poorest to 5 = richest).

```{r, warning=FALSE, message=FALSE}
# Read dataset
antenatal <- read_csv("Datasets/7.5.txt")
glimpse(antenatal)
descr(antenatal)
```

## Estimation

Mixed-effects logistic regression models are fitted to estimate the effects of various predictors on whether women received antenatal care, considering the hierarchical structure of the data (women nested within communities). There are two types of models: a random intercept model and a random slope model.

### Random Intercept Model

Random intercept model estimates the effect of predictors on the likelihood of receiving antenatal care while allowing the baseline log-odds to vary across communities.

```{r}
ri_mod <- glmer(
  antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc + (1 | comm),
  data = antenatal,
  family = binomial("logit"),
  glmerControl(calc.derivs = FALSE)
)

summary(ri_mod)
```

------------------------------------------------------------------------

-   **glmer()**: Fits a generalized linear mixed-effects model.
-   **antemed \~ magec + magecsq + meduc2 + meduc3 + wealthc**: Specifies the fixed effects (predictors).
-   **(1 \| comm)**: Specifies a random intercept for the community (`comm`).
-   **data = antenatal**: Specifies the dataset.
-   **family = binomial("logit")**: Specifies that the outcome is binary and the link function is logit.
-   **glmerControl(calc.derivs = FALSE)**: Disables derivative calculations to avoid warnings and speed up estimation.

### Random Slope Model

Random slope model estimates the effect of predictors on the likelihood of receiving antenatal care while allowing both the baseline log-odds and the effect of wealth to vary across communities.

```{r}
rs_mod <- glmer(
  antemed ~ magec + magecsq + meduc2 + meduc3 + wealthc +
    (1 + wealthc | comm),
  data = antenatal,
  family = binomial("logit"),
  glmerControl(calc.derivs = FALSE)
)

tidy(rs_mod, conf.int = TRUE) %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

-   The random slope model extends the random intercept model by allowing the slope of `wealthc` to vary across communities (`comm`).
-   **(1 + wealthc \| comm)**: Specifies random intercepts and random slopes for `wealthc` within each community.
-   **tidy(rs_mod, conf.int = TRUE)**: Uses the `broom.mixed` package to tidy the model output and include confidence intervals.
-   **kbl() %\>% kable_styling()**: Formats the output into a nice table.

### Model Comparison

```{r}
anova(rs_mod, ri_mod, test = "Chisq")
```

------------------------------------------------------------------------

**Conclusion**: The p-value (0.005756) is less than 0.05, indicating that the random slope model significantly improves the fit over the random intercept model. Therefore, the effect of wealth varies across communities.

### Interpretation of Random Slope Model

1.  **Fixed Effects**

    -   **(Intercept)**: The baseline log-odds of receiving antenatal care is -0.455.
    -   **magec**: Mother's age at child's birth has a negligible and non-significant effect.
    -   **magecsq**: The squared term for mother’s age, also non-significant.
    -   **meduc2**: Mothers with primary education have significantly higher log-odds (0.547) of receiving antenatal care compared to those with no education.
    -   **meduc3**: Mothers with secondary or higher education have even higher log-odds (1.309) of receiving antenatal care.
    -   **wealthc**: Wealth has a significant positive effect on the log-odds (0.405) of receiving antenatal care.

2.  **Random Effects**

    -   **sd\_\_(Intercept)**: Standard deviation of the random intercepts for communities is 0.917, indicating variability in the baseline log-odds across communities.
    -   **cor\_\_(Intercept).wealthc**: The correlation between the random intercepts and random slopes for wealth is -0.999, indicating a very strong negative relationship.
    -   **sd\_\_wealthc**: Standard deviation of the random slopes for wealth is 0.119, indicating variability in the effect of wealth across communities.

3.  **Conclusion**: The effect of wealth on the log-odds of receiving antenatal care in Community $j$ is estimated as $0.405 + \hat{u}_{5j}$, where $\hat{u}_{5j}$ is the random effect for wealth in community $j$.

### Random Slope Model II

Fit another random slope model using age and wealth as fixed effects to consider the random effects of wealth and community. This model allows the log-odds of receiving antenatal care to vary both with the woman's age and wealth and across different communities.

```{r}
rs_mod2 <- glmer(antemed ~ mage + wealth + (1 + wealth | comm),
  family = binomial("logit"),
  data = antenatal,
  glmerControl(calc.derivs = FALSE)
)

tidy(rs_mod2, conf.int = TRUE)
```

------------------------------------------------------------------------

-   **glmer()**: Fits a generalized linear mixed-effects model.
-   **antemed \~ mage + wealth**: Specifies the fixed effects (predictors) as mother's age (`mage`) and wealth (`wealth`).
-   **(1 + wealth \| comm)**: Specifies random intercepts and random slopes for wealth within each community (`comm`). This means both the baseline log-odds and the effect of wealth on antenatal care can vary across communities.
-   **family = binomial("logit")**: Specifies that the outcome is binary and the link function is logit.
-   **data = antenatal**: Specifies the dataset to be used.
-   **glmerControl(calc.derivs = FALSE)**: Disables derivative calculations to avoid warnings and speed up estimation.

------------------------------------------------------------------------

**Interpretation:**

1.  **Fixed Effects:**

    -   **(Intercept)**: The baseline log-odds of receiving antenatal care is -0.932 for a woman with average values of the predictors.
    -   **mage**: Each one-year increase in age decreases the log-odds of receiving antenatal care by 0.029, holding wealth and the random effects constant. This effect is statistically significant with a p-value less than 0.05.
    -   **wealth**: Each one-unit increase in wealth increases the log-odds of receiving antenatal care by 0.575, holding age and the random effects constant. This effect is statistically significant with a p-value less than 0.05.

2.  **Random Effects:**

    -   **sd\_(Intercept)**: The standard deviation of the random intercepts for communities is 1.27, indicating variability in the baseline log-odds across communities.
    -   **cor\_(Intercept).wealth**: The correlation between the random intercepts and random slopes for wealth is -0.864, indicating a strong negative relationship.
    -   **sd_wealth**: The standard deviation of the random slopes for wealth is 0.161, indicating variability in the effect of wealth across communities.

3.  **Conclusion**:

    -   **Age**: A one-year increase in age, while controlling for wealth and the random effects of wealth and community, results in a decrease in the log-odds of receiving antenatal care by 0.02899.
    -   **Wealth**: A one-unit increase in wealth, while controlling for age and the random effects of wealth and community, results in an increase in the log-odds of receiving antenatal care by 0.5746.

#### Predicted Log-Odds for Each Woman

The predicted log-odds for each woman are calculated by combining the fixed effects (coefficients for the predictors like age and wealth) with the random effects (community-specific deviations).

```{r}
pred_rs_mod2 <- predict(rs_mod2, type = "link")
head(pred_rs_mod2, 10)
```

------------------------------------------------------------------------

-   **predict(rs_mod2, type = 'link')**: Predicts the log-odds of receiving antenatal care for each woman in the dataset using the fitted model.
-   **head(pred_rs_mod2, 10)**: Displays the first 10 predicted log-odds.

#### Manual Calculation for Predicted Log-Odds

The log-odds for each woman can be manually calculated by combining the fixed and random effects. For example, for a woman in community 1 with specific values for age and wealth:

1.  **Fixed Effects:**

```{r}
fixef(rs_mod2)
```

::: callout-note
**Intercept**: -0.93168554

**Age (mage)**: -0.02899327 per year

**Wealth**: 0.57459232 per unit
:::

2.  **Random Effects for Community 1:**

```{r}
head(ranef(rs_mod2)$comm, 3)
```

::: callout-note
**Intercept**: -0.02016042

**Wealth**: 0.005863202
:::

3.  **Log-Odds Calculation for Each Woman:**

For the first woman in community 1 with age 33 and wealth 3: $$ 
(\text{Intercept} + u_{0}) + (\beta_{\text{mage}} \cdot \text{mage}) + (\beta_{\text{wealth}} + u_{\text{wealth}}) \cdot \text{wealth} 
$$

$$ 
(-0.93168554 + -0.02016042) + (-0.02899327 \cdot 33) + (0.57459232 + 0.005863202) \cdot 3 
$$

$$ 
= -0.1672498 
$$

::: callout-note
For the second woman in community 1 with age 21 and wealth 4: $= 0.7611214$

For the third woman in community 1 with age 26 and wealth 2: $= -0.544754$
:::

## Plots

These plots provide valuable insights into the model's results, making it easier to interpret and communicate the effects of different predictors and the variability across different groups or communities.

### Fixed Effects Plot

The fixed effects plot visualizes the estimated fixed effects from the model, showing how predictors like age and wealth influence the log-odds of receiving antenatal care across the entire population.

```{r}
# Create fixed effects plot
plot_model(rs_mod2)
```

### Random Effect Plot

The random effects plot visualizes the estimated random effects for different communities, along with their confidence intervals. It helps in understanding the variability in the effects across communities.

```{r}
# The `ranef` function extracts the random effects from the fitted model `rs_mod2`
re_rs_mod2 <- ranef(rs_mod2)

# The `augment` function adds additional information
cater_re_rs_mod2 <- augment(re_rs_mod2)

# Create random effects plot
ggplot(cater_re_rs_mod2, aes(estimate, qq, xmin = lb, xmax = ub)) +
  geom_errorbarh(height = 0) +
  geom_point() +
  facet_wrap(~variable, scale = "free_x")
```

------------------------------------------------------------------------

-   **ggplot**: The main function from the `ggplot2` package used for creating the plot.
-   **aes(estimate, qq, xmin = lb, xmax = ub)**: Sets up the aesthetic mappings. Here, `estimate` is the estimated random effect, `qq` is the quantile, `xmin` and `xmax` represent the lower and upper bounds of the confidence intervals, respectively.
-   **geom_errorbarh(height = 0)**: Adds horizontal error bars to represent the confidence intervals of the random effects.
-   **geom_point()**: Adds points to represent the estimated random effects.
-   **facet_wrap(\~variable, scale = "free_x")**: Creates separate panels for each variable's random effects, allowing the x-axis scale to vary for each panel.

### Plotting the Predicted Values and Marginal Effects

These plots help visualize the relationship between the predictors (mother's age and wealth) and the predicted probability of receiving antenatal care, providing insights into how these factors influence the outcome.

```{r, warning=FALSE, message=FALSE}
# Plots predicted values for the mother's age
plot_model(rs_mod2, type = "pred", vars = "mage")
```

-   This code creates a plot showing the predicted values of receiving antenatal care based on the mother's age.

-   **plot_model**: This function from the `sjPlot` package is used to create various types of plots for regression models.

    -   **rs_mod2**: This is the fitted mixed-effects logistic regression model.
    -   **type = "pred"**: Specifies that the plot should display predicted values.
    -   **vars = "mage"**: Indicates that the plot should show the predicted values for the variable "mage" (mother's age).

```{r, warning=FALSE, message=FALSE}
# Plots predicted values for the wealth index
plot_model(rs_mod2, type = "pred", vars = "wealth")
```

-   This code creates a plot showing the predicted values of receiving antenatal care based on the wealth index.
-   **vars = "wealth"**: Indicates that the plot should show the predicted values for the variable "wealth".

```{r, warning=FALSE, message=FALSE}
# Plots predicted values for both the mother's age and the wealth index in separate panels
plot_model(rs_mod2, type = "pred", vars = c("mage", "wealth"))
```

-   This code creates a plot showing the predicted values of receiving antenatal care based on both the mother's age and the wealth index.
-   **vars = c("mage", "wealth")**: Indicates that the plot should show the predicted values for both "mage" and "wealth".

```{r, warning=FALSE, message=FALSE}
# Plots predicted values for both the mother's age and the wealth index on the same plot
plot_model(rs_mod2, type = "pred", vars = c("mage", "wealth"), facet.grid = FALSE)
```

-   This code creates a combined plot showing the predicted values of receiving antenatal care based on both the mother's age and the wealth index, without using separate panels for each variable.
-   **facet.grid = FALSE**: Disables faceting, so both variables will be displayed on the same plot rather than in separate panels.

# Longitudinal Data

Longitudinal data involves repeated observations of the same subjects over time, allowing researchers to examine changes within subjects and the effects of time-dependent variables. Longitudinal data is collected in multiple waves or at several time points, providing a rich dataset for analyzing trends, patterns, and causal relationships.

## Dataset Overview

The toenail dataset is used to examine longitudinal data where the outcome of interest is in binary form. This dataset is sourced from the HSAUR book and package and is also detailed in Chapter 10 of Multilevel and Longitudinal Modelling Using Stata.

The outcome variable measures the condition of the toenail and is binary (dichotomous), with categories: none or mild, and moderate or severe. This outcome captures whether the toenail condition is relatively mild or more severe.

The primary covariate in the study is the treatment received by the subjects. This variable indicates the type of treatment administered and is expected to influence the toenail condition over time.

1.  Variables in the Dataset:

    -   **Outcome:** Toenail condition (none or mild vs. moderate or severe).
    -   **Treatment:** Type of treatment administered to the patients.
    -   **Visit:** The time point at which the measurement was taken.
    -   **PatientID:** Unique identifier for each patient.

```{r}
data(toenail)
summary(toenail)
```

2.  Hierarchical Structure:

    -   **Level 1 (visit):** This level represents repeated measurements or visits for each subject. Each visit provides a snapshot of the toenail condition and the treatment status at that point in time.

    -   **Level 2 (patientID):** This level represents individual patients, with each patient having a unique identifier. The repeated visits for each patient are nested within this identifier, allowing for the analysis of within-patient changes over time.

```{r}
toenail %>% count(visit)
toenail %>%
  count(visit, patientID) %>%
  datatable()
```

## Exploratory Data Analysis

### Descriptive Analysis

Describe the data and get an overview of its contents. Display the first 30 observations in the dataset.

```{r}
toenail %>%
  slice(1:30) %>%
  kbl() %>%
  kable_styling()
```

### Data Visualization

The visualization step involves plotting the distribution of the outcome variable across different visits and treatments to get a better understanding of the data. Generate a bar plot where the x-axis represents the visit number, the bars are filled based on the outcome severity, and the plots are faceted by treatment group.

```{r}
ggplot(toenail, aes(visit)) +
  geom_bar(aes(fill = outcome)) +
  facet_grid(. ~ treatment)
```

## Estimation

### Population Average Model

The analysis focuses on examining the longitudinal data, using the primary covariate (treatment) to assess its impact on the outcome over multiple visits for each patient. The hierarchical structure includes the repeated measures (visits) nested within patients. For the estimation of the population average model, Generalized Estimating Equations (GEE) will be used.

```{r}
# Conversion of Outcome Variable
toenail2 <- toenail %>% mutate(outcome2 = as.integer(outcome) - 1)
```

-   The binary outcome variable `outcome` is converted to a numerical variable `outcome2`.
-   This is done using the `mutate` function from the `dplyr` package to ensure the GEE function can process it.

```{r, warning=FALSE, message=FALSE}
# Running the GEE Model
gee_toe <- gee(outcome2 ~ treatment + visit,
  id = patientID,
  data = toenail2,
  family = binomial,
  corstr = "exchangeable",
  scale.fix = TRUE,
  scale.value = 1
)
```

-   The `gee` function is used to fit the GEE model.
-   The outcome variable is `outcome2`, and the predictors are `treatment` and `visit`.
-   The data used is the `toenail` dataset.
-   The correlation structure is specified as `exchangeable`, indicating that the correlation between any two observations from the same subject is assumed to be constant.
-   The scale is fixed (`scale.fix = TRUE`), and the scale value is set to 1 (`scale.value = 1`).

```{r}
# Summary of the GEE Model
summary(gee_toe)
```

```{r, warning=FALSE, message=FALSE}
# Comparison with Independence Structure
gee_toe_ind <- gee(outcome2 ~ treatment + visit,
  id = patientID,
  data = toenail2,
  family = binomial,
  corstr = "independence",
  scale.fix = TRUE,
  scale.value = 1
)
```

::: callout-note
An additional GEE model is fitted with an `independence` correlation structure to compare the effects.
:::

```{r}
summary(gee_toe_ind)
```

### Random Intercept Model

The model is fitted to the data using the `glmer` function from the `lme4` package. This model allows for random intercepts for each subject, accounting for within-subject correlation. The outcome variable is modeled as a function of the treatment, time, and their interaction, with random intercepts for each patient. The model includes the following covariates:

-   `treatment`
-   `time` (a numerical variable representing the time points)
-   `interaction between treatment and time`

```{r}
mod_toe1 <- glmer(outcome ~ treatment * time + (1 | patientID),
  data = toenail,
  family = binomial,
  nAGQ = 20
)
```

------------------------------------------------------------------------

-   `outcome ~ treatment*time`: This specifies the fixed effects in the model, including the interaction between treatment and time.
-   `(1 | patientID)`: This specifies the random intercept for each patient, allowing for individual variability.
-   `data = toenail`: The dataset used for the analysis.
-   `family = binomial`: Indicates that the outcome variable is binary.
-   `nAGQ = 20`: The number of quadrature points for approximating the likelihood. Higher values lead to more accurate but computationally intensive results.

```{r}
summary(mod_toe1)
```

```{r}
tidy(mod_toe1, effect = "fixed", conf.int = TRUE) %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

-   This code uses the `broom.mixed` package to tidy up the model output and includes confidence intervals for the estimates.
-   The result shows the log-odds coefficients, standard errors, z-values, p-values, and confidence intervals for each fixed effect.

```{r}
tidy(mod_toe1, effect = "fixed", exponentiate = TRUE, conf.int = TRUE) %>%
  kbl() %>%
  kable_styling()
```

------------------------------------------------------------------------

-   This code converts the log-odds coefficients into odds ratios by exponentiating the coefficients.
-   Odds ratios are easier to interpret in the context of logistic regression.

------------------------------------------------------------------------

**Summary of Output**

-   **Intercept**: The intercept represents the log-odds of the outcome for the reference group (baseline category) when all covariates are at their reference levels (e.g., no treatment and at the initial time point).

-   **Treatment Effect**: The coefficient for treatment (`treatmentterbinafine`) represents the change in log-odds of the outcome associated with being in the treatment group versus the control group. An odds ratio less than 1 suggests a protective effect of the treatment, although in this case, the result is not statistically significant (p-value \> 0.05).

-   **Time Effect**: The coefficient for time indicates how the log-odds of the outcome change over time. A negative coefficient suggests that the probability of the outcome decreases over time.

-   **Interaction Effect**: The interaction term (`treatmentterbinafine:time`) shows how the effect of treatment changes over time. A significant interaction effect indicates that the treatment's impact on the outcome varies depending on the time point.

### Interpretation

1.  **Itraconazole Group**

    -   The estimated conditional odds for a subject in the itraconazole group are multiplied by 0.68 for every month.
    -   Each month, the odds of having a none or mild toenail condition (versus moderate or severe) decrease by 32% for subjects in the itraconazole group.
    -   This suggests that the treatment's effectiveness improves over time.

$$
100\% \times (0.6765 - 1) = -32\%
$$

2.  **Terbinafine Group**

    -   The conditional odds for a subject in the terbinafine group are multiplied by 0.59 for every month.
    -   Each month, the odds of having a none or mild toenail condition decrease by 41% for subjects in the terbinafine group.
    -   This larger reduction indicates that the effectiveness of terbinafine in improving toenail conditions is more pronounced over time compared to the itraconazole group.

$$
100\% \times (0.6765 \times 0.8722 - 1) = -41\%
$$

### Prediction

Estimate the predicted probabilities and log-odds for each observation in the dataset using the fitted random intercept model.

#### Fixed Effects

Extracts the fixed effect coefficients from the model, which are used to calculate predictions.

```{r}
fixef(mod_toe1)
```

#### Random Effects

Extracts the random effect values for each patient. The random intercepts account for individual variability not explained by the fixed effects.

```{r}
re_toe <- ranef(mod_toe1)
head(re_toe$patientID, 20) %>% datatable()
```

#### Predicted Log Odds and Probability

```{r}
head(predict(mod_toe1, type = "link"), 20)
```

::: callout-note
`type = 'link'`: Returns the predicted log-odds.
:::

```{r}
head(predict(mod_toe1, type = "response"), 20)
```

::: callout-note
`type = 'response'`: Returns the predicted probabilities.
:::

#### Manual Calculation of Log Odds

The log-odds for each observation can be manually calculated using the fixed and random effect coefficients. The logistic regression model is specified as follows:

$$
\text{Log Odds} = \beta_0 + \beta_1 \times \text{treatment} + \beta_2 \times \text{time} + \beta_3 \times (\text{treatment} \times \text{time}) + u_i
$$

-   Intercept: -1.6183291
-   Treatment (terbinafine): -0.1608070
-   Time: -0.3908424
-   Interaction between treatment (terbinafine) and time: -0.1367248

##### Observation 1

-   Treatment (tx) = 1 (terbinafine)
-   Month = 0
-   Random effect (RE) for patient 1 = 3.7341888

$$
\text{Log Odds} = -1.6183291 + (-0.1608070 \times 1) + (-0.3908424 \times 0) + (-0.1367248 \times (1 \times 0)) + 3.7341888
$$

$$
\text{Log Odds} = 1.955053
$$

##### Observation 7

-   Treatment (tx) = 1 (terbinafine)
-   Month = 13.07143
-   Random effect (RE) for patient 1 = 3.7341888

$$
\text{Log Odds} = -1.6183291 + (-0.1608070 \times 1) + (-0.3908424 \times 13.07143) + (-0.1367248 \times (1 \times 13.07143)) + 3.7341888
$$

$$
\text{Log Odds} = -4.941005
$$

#### Predicting New Data

1.  Create new data:

```{r}
# Create a new dataset with combinations of treatment and time values
new_data2 <- expand.grid(
  treatment = c("itraconazole", "terbinafine"),
  time = seq(1, 18, by = 2)
)
```

2.  Predict the probability:

```{r}
# Estimate the probabilities and log-odds for new data
pred_prob <- predict(mod_toe1,
  newdata = new_data2,
  type = "response",
  re.form = ~0
)
```

3.  Visualize the predictions:

```{r}
# Combine the data and the probability column
new_data3 <- cbind(new_data2, pred_prob)

# Plot
ggplot(new_data3, aes(x = time, y = pred_prob)) +
  geom_point() +
  facet_grid(. ~ treatment)
```

4.  Predict the log odds:

```{r}
# predict the log-odds for the new data without considering the random effects
predict(mod_toe1,
  newdata = new_data2,
  type = "link",
  re.form = ~0
)
```

## Plots

### Fixed Effect Plot

The fixed effect (also known as the regression coefficient) represents the overall impact of each predictor on the response variable, assuming all random effects are zero.

```{r}
# Fixed effect (beta of the model)
mod_toe1@beta
```

------------------------------------------------------------------------

-   The intercept ($\beta_0$): -1.6183291
-   The effect of the treatment ($\beta_1$): -0.1608070
-   The effect of time ($\beta_2$): -0.3908424
-   The interaction effect of treatment and time ($\beta_3$): -0.1367248

```{r}
# Fixed effect plot
plot_model(mod_toe1, type = "est")
```

### Random Effect Plot

Random effect represents the deviation of individual groups (patients) from the overall model. It capture the variability in the data that is not explained by the fixed effects alone.

```{r, warning=FALSE, message=FALSE}
# Random effect
mod_toe1@u %>%
  tidy() %>%
  datatable()
```

::: callout-note
The output provides the random effect estimates for each patient in the study, which show how each patient's intercept deviates from the overall intercept.
:::

```{r}
# Random effect plot
plot_model(mod_toe1, type = "re")
```

# Acknowledgment

I would like to express my gratitude to [Professor Dr. Kamarul Imran Musa](https://myanalytics.com.my/), Medical Epidemiologist and Statistician, and Professor in Epidemiology and Biostatistics at the School of Medical Sciences, Universiti Sains Malaysia, for his teaching and guidance on the subject matter.

# References

-   Lecture on Logistic Regression for Correlated Data by [Professor Dr. Kamarul Imran Musa](https://myanalytics.com.my/)
-   Applied Logistic Regression by Hosmer, D.W., Lemeshow, S., and Sturdivant, R.X. (2013). Applied Logistic Regression. Wiley
-   Multilevel Models for Binary Responses R Practicals: P7.5 Two-Level Random Slope Model by Camille Szmaragd and George Leckie from the Centre for Multilevel Modelling, Bristol University
-   Multilevel and Longitudinal Modelling Using Stata, Chapter 10 (pg. 515)

# R Codes

The R codes used in this analysis are available at the following GitHub repository: [DrPH-Epidemiology-Revision](https://github.com/drsaufi/DrPH-Epidemiology-Revision.git). This repository includes all scripts and data necessary to replicate the analyses presented in this work.
