---
title: "Machine Learning Classification"
author: "Dr Muhammad Saufi"
format: html
editor: visual
---

# Setting Up the Environment

```{r}
# Load libraries
library(mlbench)
library(plyr)
library(rpart)
library(rpart.plot)
library(class)
library(neuralnet)
library(caret)
```

# Load the Data

```{r}
data(PimaIndiansDiabetes)
```

## Data Structure

```{r}
str(PimaIndiansDiabetes)
```

## Data Summary

```{r}
summary(PimaIndiansDiabetes)
```

## Prepare the Data

```{r}
df <- PimaIndiansDiabetes
```


```{r}
df1 = df[df['glucose'] != 0 & df['pressure'] != 0 &  
           df['triceps'] != 0 & df['mass'] != 0,]
```

## Divide Data into Training and Test Dataset

```{r}
sRow <- floor(nrow(df1) * .8)
trainData <- df1[1:sRow, ]
testData <- df1[(sRow+1):nrow(df1), ]
```

# Decision Tree
## Model Building

```{r}
DTmodel <- rpart(diabetes~.,data=trainData, method='class', parms=list(split='information'))
```


```{r}
prp(DTmodel, roundint=FALSE, digits=0)
```


## Model Evaluation

```{r}
DTpred = predict(DTmodel, testData, type='class')
```


```{r}
confusionMatrix(DTpred, testData$diabetes, positive='pos')
```

# K-Nearest Neighboor
## Model Building and Evaluation

```{r}
df2 <- df1
```


```{r}
normalize <- function(x) {
  return ((x - min(x)) / (max(x) - min(x)))
}
```


```{r}
df2[1:8] <- as.data.frame(lapply(df2[1:8], normalize))
```


```{r}
trainDataN <- df2[1:sRow,]
testDataN <- df2[(sRow+1):nrow(df2),]
```


```{r}
KNNpred = knn(train=trainDataN [,1:8], test=testDataN[,1:8], 
              cl=trainDataN [,9] , k=7)
```


```{r}
confusionMatrix(KNNpred, testDataN$diabetes, positive='pos')
```

# Artificial Neural Network
## Model Building with 1 Layer 

```{r}
NNmodel1 <- neuralnet(diabetes ~ pregnant + glucose + pressure + triceps + insulin + 
                    mass + pedigree + age, data=trainDataN, hidden=1, linear.output=FALSE)
```


```{r}
plot(NNmodel1)
```


## Model Evaluation

```{r}
predicted1 <- predict(NNmodel1, testDataN, type='class')
```


```{r}
NNpred1 <- ifelse(max.col(predicted)==1, 'neg','pos')
```


```{r}
confusionMatrix(factor(NNpred1), testDataN$diabetes, positive='pos')
```

## DT Cross Validation

```{r}
k <- 10
DTaccuracy <- rep(NA, k)
```


```{r}
folds <- split(df1, cut(1:nrow(df1), k))
```


for (i in 1:k)

```{r}
test <-  ldply(folds[i], data.frame)
train <- ldply(folds[-i], data.frame)
```


```{r}
test$.id = NULL
train$.id = NULL
```


```{r}
DTmodel = rpart(diabetes~., data=train, method='class', parms = list(split ='information')) 
  DTpred = predict(DTmodel, test, type = 'class')
  DTaccuracy[i] = confusionMatrix(DTpred, test$diabetes, positive='pos')$overall['Accuracy']
```

